/// <reference path="../Declarations/node/node.d.ts" />
import http = require("http");
import Config = require("./Config");
import Context = require("./Context");
import ContractsModule = require("../Library/Contracts");
import Channel = require("./Channel");
declare class Client {
    private static _sequenceNumber;
    config: Config;
    context: Context;
    commonProperties: {
        [key: string]: string;
    };
    channel: Channel;
    /**
     * Constructs a new client of the client
     * @param iKey the instrumentation key to use (read from environment variable if not specified)
     */
    constructor(iKey?: string);
    /**
     * Log a user action or other occurrence.
     * @param   name    A string to identify this event in the portal.
     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.
     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.
     */
    trackEvent(name: string, properties?: {
        [key: string]: string;
    }, measurements?: {
        [key: string]: number;
    }): void;
    /**
     * Log a trace message
     * @param   message    A string to identify this event in the portal.
     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.
     */
    trackTrace(message: string, severityLevel?: ContractsModule.Contracts.SeverityLevel, properties?: {
        [key: string]: string;
    }): void;
    /**
     * Log an exception you have caught.
     * @param   exception   An Error from a catch clause, or the string error message.
     * @param   properties  map[string, string] - additional data used to filter events and metrics in the portal. Defaults to empty.
     * @param   measurements    map[string, number] - metrics associated with this event, displayed in Metrics Explorer on the portal. Defaults to empty.
     */
    trackException(exception: Error, properties?: {
        [key: string]: string;
    }): void;
    /**
     * Log a numeric value that is not associated with a specific event. Typically used to send regular reports of performance indicators.
     * To send a single measurement, use just the first two parameters. If you take measurements very frequently, you can reduce the
     * telemetry bandwidth by aggregating multiple measurements and sending the resulting average at intervals.
     * @param   name    A string that identifies the metric.
     * @param   value The value of the metric
     */
    trackMetric(name: string, value: number): void;
    trackRequest(request: http.ServerRequest, response: http.ServerResponse, properties?: {
        [key: string]: string;
    }): void;
    /**
     * Immediately send all queued telemetry.
     */
    sendPendingData(): void;
    getEnvelope(data: ContractsModule.Contracts.Data<ContractsModule.Contracts.Domain>, tagOverrides?: {
        [key: string]: string;
    }): ContractsModule.Contracts.Envelope;
    /**
     * Generic track method for all telemetry types
     * @param data the telemetry to send
     * @param tagOverrides the context tags to use for this telemetry which overwrite default context values
     */
    track(data: ContractsModule.Contracts.Data<ContractsModule.Contracts.Domain>, tagOverrides?: {
        [key: string]: string;
    }): void;
}
export = Client;
