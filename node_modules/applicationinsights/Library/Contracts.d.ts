export declare module Contracts {
    enum DataPointType {
        Measurement = 0,
        Aggregation = 1,
    }
    enum DependencyKind {
        SQL = 0,
        Http = 1,
        Other = 2,
    }
    enum DependencySourceType {
        Undefined = 0,
        Aic = 1,
        Apmc = 2,
    }
    enum SessionState {
        Start = 0,
        End = 1,
    }
    enum SeverityLevel {
        Verbose = 0,
        Information = 1,
        Warning = 2,
        Error = 3,
        Critical = 4,
    }
    class ContextTagKeys {
        applicationVersion: string;
        applicationBuild: string;
        deviceId: string;
        deviceIp: string;
        deviceLanguage: string;
        deviceLocale: string;
        deviceModel: string;
        deviceNetwork: string;
        deviceOEMName: string;
        deviceOS: string;
        deviceOSVersion: string;
        deviceRoleInstance: string;
        deviceRoleName: string;
        deviceScreenResolution: string;
        deviceType: string;
        deviceMachineName: string;
        locationIp: string;
        operationId: string;
        operationName: string;
        operationParentId: string;
        operationRootId: string;
        operationSyntheticSource: string;
        operationIsSynthetic: string;
        sessionId: string;
        sessionIsFirst: string;
        sessionIsNew: string;
        userAccountAcquisitionDate: string;
        userAccountId: string;
        userAgent: string;
        userId: string;
        userStoreRegion: string;
        sampleRate: string;
        internalSdkVersion: string;
        internalAgentVersion: string;
        constructor();
    }
    class Domain {
        ver: number;
        properties: any;
        constructor();
    }
    class Data<TDomain extends Contracts.Domain> {
        baseType: string;
        baseData: TDomain;
        constructor();
    }
    class Envelope {
        ver: number;
        name: string;
        time: string;
        sampleRate: number;
        seq: string;
        iKey: string;
        flags: number;
        deviceId: string;
        os: string;
        osVer: string;
        appId: string;
        appVer: string;
        userId: string;
        tags: {
            [key: string]: string;
        };
        data: Data<Domain>;
        constructor();
    }
    class EventData extends Contracts.Domain {
        ver: number;
        name: string;
        properties: any;
        measurements: any;
        constructor();
    }
    class MessageData extends Contracts.Domain {
        ver: number;
        message: string;
        severityLevel: Contracts.SeverityLevel;
        properties: any;
        constructor();
    }
    class ExceptionData extends Contracts.Domain {
        ver: number;
        handledAt: string;
        exceptions: ExceptionDetails[];
        severityLevel: Contracts.SeverityLevel;
        problemId: string;
        crashThreadId: number;
        properties: any;
        measurements: any;
        constructor();
    }
    class StackFrame {
        level: number;
        method: string;
        assembly: string;
        fileName: string;
        line: number;
        constructor();
    }
    class ExceptionDetails {
        id: number;
        outerId: number;
        typeName: string;
        message: string;
        hasFullStack: boolean;
        stack: string;
        parsedStack: StackFrame[];
        constructor();
    }
    class DataPoint {
        name: string;
        kind: Contracts.DataPointType;
        value: number;
        count: number;
        min: number;
        max: number;
        stdDev: number;
        constructor();
    }
    class MetricData extends Contracts.Domain {
        ver: number;
        metrics: DataPoint[];
        properties: any;
        constructor();
    }
    class PageViewData extends Contracts.EventData {
        ver: number;
        url: string;
        name: string;
        duration: string;
        properties: any;
        measurements: any;
        constructor();
    }
    class PageViewPerfData extends Contracts.PageViewData {
        ver: number;
        url: string;
        perfTotal: string;
        name: string;
        duration: string;
        networkConnect: string;
        sentRequest: string;
        receivedResponse: string;
        domProcessing: string;
        properties: any;
        measurements: any;
        constructor();
    }
    class RemoteDependencyData extends Contracts.Domain {
        ver: number;
        name: string;
        kind: Contracts.DataPointType;
        value: number;
        count: number;
        min: number;
        max: number;
        stdDev: number;
        dependencyKind: Contracts.DependencyKind;
        success: boolean;
        async: boolean;
        dependencySource: Contracts.DependencySourceType;
        commandName: string;
        dependencyTypeName: string;
        properties: any;
        constructor();
    }
    class AjaxCallData extends Contracts.PageViewData {
        ver: number;
        url: string;
        ajaxUrl: string;
        name: string;
        duration: string;
        requestSize: number;
        responseSize: number;
        timeToFirstByte: string;
        timeToLastByte: string;
        callbackDuration: string;
        responseCode: string;
        success: boolean;
        properties: any;
        measurements: any;
        constructor();
    }
    class RequestData extends Contracts.Domain {
        ver: number;
        id: string;
        name: string;
        startTime: string;
        duration: string;
        responseCode: string;
        success: boolean;
        httpMethod: string;
        url: string;
        properties: any;
        measurements: any;
        constructor();
    }
    class SessionStateData extends Contracts.Domain {
        ver: number;
        state: Contracts.SessionState;
        constructor();
    }
    class PerformanceCounterData extends Contracts.Domain {
        ver: number;
        categoryName: string;
        counterName: string;
        instanceName: string;
        kind: DataPointType;
        count: number;
        min: number;
        max: number;
        stdDev: number;
        value: number;
        properties: any;
        constructor();
    }
}
